import java.util.LinkedList;

import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.Serializable;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author liorz
 */
public class Resources_GUI extends javax.swing.JFrame {

    /**
     * Creates new form Resources
     */
    LinkedList<Resource> resourceList = new LinkedList<Resource>();
  int rowNumber = 0;
    private DefaultTableModel model;
    private int selectedRowIndex;
    
    public Resources_GUI() {
        initComponents();
        
        Resource temp = new Resource(); //initialize a temporary resource  to call action item functions
		resourceList = temp.load(); //load items to the linked list
		if (resourceList.size() > 0) loadRows(); //load rows onto the table if there is any items in the list
    
        }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        pageName = new java.awt.Label();
        deliverablesButton = new javax.swing.JButton();
        tasksButton = new javax.swing.JButton();
        actionItemsButton = new javax.swing.JButton();
        issuesButton = new javax.swing.JButton();
        resourcesButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        createButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        homeButton = new javax.swing.JButton();
        resource_Info = new java.awt.Panel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pageName.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        pageName.setMinimumSize(new java.awt.Dimension(40, 20));
        pageName.setName(""); // NOI18N
        pageName.setPreferredSize(new java.awt.Dimension(40, 20));
        pageName.setText("  Resources");

        deliverablesButton.setText("Deliverables");
        deliverablesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeliverablesButtonActionPerformed(evt);
            }
        });

        tasksButton.setText("Tasks");
        tasksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TasksButtonActionPerformed(evt);
            }
        });

        actionItemsButton.setText("Action Items");
        actionItemsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionItemsButtonActionPerformed(evt);
            }
        });

        issuesButton.setText("Issues");
        issuesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IssuesButtonActionPerformed(evt);
            }
        });

        resourcesButton.setText("Resources");
        
        //click the row functionality
    table.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent mouseEvent) {
          JTable table =(JTable) mouseEvent.getSource();
          Point point = mouseEvent.getPoint();
          int row = table.rowAtPoint(point);
          if (mouseEvent.getClickCount() == 2 && table.getSelectedRow() != -1) { //double click functionality
              System.out.println("[double click] row = " + row);
              rowNumber = row;
              moreInfoMenu();
          }
          if (mouseEvent.getClickCount() == 1 && table.getSelectedRow() != -1) { //single click functionality
              System.out.println("[single click] row = " + row);
              rowNumber = row;
          }
      }
    });
        
        table.setModel(new javax.swing.table.DefaultTableModel(
				new Object [][] {},
				new String [] {
						"ID", "Name", "Title", "Skills", "Pay Rate", "Tasks Assigned" , "Status"
				}
				) {
			Class[] types = new Class [] {
					java.lang.String.class,java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
			};
			boolean[] canEdit = new boolean [] {
					false, false, false, false, false, false
			};

			public Class getColumnClass(int columnIndex) {
				return types [columnIndex];
			}

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit [columnIndex];
			}

		});
        this.model = (DefaultTableModel) table.getModel();

        table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(table);

        createButton.setText("Create");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Update");
        updateButton.setVisible(false);
        //updateButton.addActionListener(new java.awt.event.ActionListener() {
           // public void actionPerformed(java.awt.event.ActionEvent evt) {
               // UpdateButtonActionPerformed(evt);
           // }
        //});

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditButtonActionPerformed(evt);
            }
        });

        homeButton.setText("Home");
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HomeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout resource_InfoLayout = new javax.swing.GroupLayout(resource_Info);
        resource_Info.setLayout(resource_InfoLayout);
        resource_InfoLayout.setHorizontalGroup(
            resource_InfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        resource_InfoLayout.setVerticalGroup(
            resource_InfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 119, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(deliverablesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tasksButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(actionItemsButton, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                            .addComponent(issuesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(resourcesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(10, 10, 10))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pageName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(createButton, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(109, 109, 109)
                        .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(105, 105, 105)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(editButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(homeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)))
                    .addComponent(resource_Info, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 824, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(homeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(updateButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(createButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(pageName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(deliverablesButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tasksButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(actionItemsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(issuesButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resourcesButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(resource_Info, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    
    
    private void TableMouseClicked(java.awt.event.MouseAdapter evt) {
		this.selectedRowIndex = table.getSelectedRow();
    System.out.println("Selected Row Index = " + table.getSelectedRow());
	}
    
    private void DeliverablesButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        resourceList.get(0).save(resourceList); 
        Deliverables_GUI deliverables = new Deliverables_GUI();
         deliverables.setVisible(true);
         setVisible(false);
    }                                                  

    private void TasksButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        resourceList.get(0).save(resourceList);
        Task_GUI tasks=new Task_GUI();
        tasks.setVisible(true);
        setVisible(false);
    }                                           

    private void ActionItemsButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        resourceList.get(0).save(resourceList);
        ActionItems_GUI actionItems=new ActionItems_GUI();
        actionItems.setVisible(true);
        setVisible(false);
    }                                                 

    private void IssuesButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        resourceList.get(0).save(resourceList);
        Issues_GUI issues = new Issues_GUI();
        issues.setVisible(true);
        setVisible(false);
    } 
    

    private void CreateButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
      String [] inputs = inputAdd();
    Resource resource = new Resource(inputs[0], inputs[1],inputs[2],inputs[3],inputs[4],inputs[5],
                                            inputs[6]);
    Object[] row = new Object [8];
    row[0] = resource.uniqueID; //id
    row[1] = inputs[0]; //name
    row[2] = inputs[1]; //title
    row[3] = inputs[2];//skill
    /*if(inputs[2].equals(resource.skills)){ //if skill already added
      row[3] = inputs[2];
      //row[3] = resource.skills + inputs[2];//new skill added
    }else{
      row[3] = inputs[2]; // if new skill
    }*/
    row[4] = inputs[3]; //payrate
    row[5] = inputs[4];//tasks
    /*if(inputs[4].equals(resource.assignedTasks)){ //if task already added
      row[5] = resource.assignedTasks + inputs[4];//new task added
    }else{
      row[5] = inputs[4]; // if new task
    }*/
    row[6] = inputs[5]; //availability
    row[7] = inputs[6]; //status
    resourceList.add(resource);
    System.out.println("added " + resource + " to the list");
    System.out.println("in create button [" + resource.uniqueID +"]");
    model.addRow(row);
    resourceList.get(0).save(resourceList);
    //System.out.println("# of row = " + model.getColumnCount());
    //model.insertRow(actionItem.uniqueID, row);
	}
    

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
    }                                            

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
       System.out.println("resourceList size = " +  resourceList.size());
    if(model.getRowCount() == 0) {
      System.out.println("Insufficient # of rows.");
      return;
    }

    String rowUniqueID = table.getModel().getValueAt(rowNumber, 0).toString();
    int indexFound = -1;
    Resource current = null;
    for(int i = 0; i < resourceList.size(); i++){
      if(resourceList.get(i).uniqueID.equals(rowUniqueID)){
        current = resourceList.get(i);
        indexFound = i;
        break;
      }
    }
    System.out.println("removed " + resourceList.get(indexFound) + " in the list");
    resourceList.remove(indexFound);
    System.out.println("Successfully removed item from linked list.");

    System.out.println("Selected row index: " + selectedRowIndex);
    model.removeRow(rowNumber);
    resourceList.get(0).save(resourceList);
    }
    
    
    
                                              

    private void EditButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
      if(model.getRowCount() == 0) {
      System.out.println("Insufficient # of rows.");
      return;
    }
    inputEdit();
    resourceList.get(0).save(resourceList);
    }                                        

    private void HomeButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
    	resourceList.get(0).save(resourceList);
        HomePage home=new HomePage();
        home.setVisible(true);
        setVisible(false);  
    }                                          

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Resources_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Resources_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Resources_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Resources_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Resources_GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton actionItemsButton;
    private javax.swing.JButton createButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton deliverablesButton;
    private javax.swing.JButton editButton;
    private javax.swing.JButton homeButton;
    private javax.swing.JButton issuesButton;
    private java.awt.Label pageName;
    private javax.swing.JButton resourcesButton;
    private javax.swing.JButton tasksButton;
    private javax.swing.JButton updateButton;
    private javax.swing.JScrollPane jScrollPane1;
    private java.awt.Panel resource_Info;
    private javax.swing.JTable table;
    // End of variables declaration     
    
    public static String[] inputAdd() {
		String[] strings = new String[7];
		JTextField nameTemp= new JTextField(20);
		JTextField titleTemp = new JTextField(50);
		JTextField skillTemp = new JTextField(10); 
		JTextField payRateTemp = new JTextField(20);
		JTextField assignedTasksTemp = new JTextField(10);
		JTextField availabilityTemp= new JTextField(10);
		JTextField statusTemp = new JTextField(10);

		Object[] fields= {"Create new Resource","Name",nameTemp,"Title",titleTemp,"Skills", skillTemp, "Pay Rate",payRateTemp,
				"Tasks Assigned",assignedTasksTemp,"Availability Calendar",availabilityTemp,"Status",statusTemp};
		//Input message with the textfields
		int result = JOptionPane.showConfirmDialog(null, fields,
				"Add Product", JOptionPane.OK_CANCEL_OPTION,JOptionPane.INFORMATION_MESSAGE);
		if (result == JOptionPane.OK_OPTION) {
			String name = nameTemp.getText();
			String title = titleTemp.getText();
			String skill = skillTemp.getText();
			String payRate = payRateTemp.getText();
			String assignedTasks = assignedTasksTemp.getText();
			String availability=availabilityTemp.getText();
			String status = statusTemp.getText();

			//String end  = endTemp.getText();
			//if the user hasn't entered anything and clicked OK
			if (name.equals("") && title.equals("") && skill.equals("") && status.equals("")) {
				JOptionPane.showMessageDialog(null, "Wrong Input\n\n Try Again");
				//restarting the method.
				inputAdd();
			}
			strings[0] = name;
			strings[1] = title;
			strings[2] = skill;
			strings[3] = payRate;
			strings[4] = assignedTasks;
			strings[5] = availability;
			strings[6] = status;
		}
		return strings;
	}
    
    public void inputEdit(){
    System.out.println("rowNumber = "+ rowNumber);
    System.out.println("Unique ID = " + table.getModel().getValueAt(rowNumber, 0).toString());

    String rowUniqueID = table.getModel().getValueAt(rowNumber, 0).toString();
    int indexFound = -1;
    Resource current = null;
    for(int i = 0; i < resourceList.size(); i++){
      if(resourceList.get(i).uniqueID.equals(rowUniqueID)){
        current = resourceList.get(i);
        indexFound = i;
        break;
      }
    }

    System.out.println("Current uniqueID = " + current.uniqueID);

    //edit values
    String[] values = modifyInput(current);

    current.name = values[0];
    current.title = values[1];
    current.skills = values[2];
    current.payRate = values[3];
    current.assignedTasks = values[4];
    current.availability = values[5];
    current.status = values[6];
    resourceList.set(indexFound, current);

    Object[] row = new Object [8];
    row[0] = current.uniqueID; //id
    row[1] = values[0]; //name
    row[2] = values[1]; //title
    row[3] = values[2]; //skills
    row[4] = values[3]; //payrate
    row[5] = values[4]; //tasks
    row[6] = values[5]; //availability
    row[7] = values[6]; //status

    model.removeRow(rowNumber);
	model.insertRow(rowNumber, row);
    System.out.println("added " + current + " to the list");

  }

  //edit the input
  public String[] modifyInput(Resource item){
    String[] strings = new String[7];
    JTextField nameTemp= new JTextField(20);
    nameTemp.setText(item.name); //preload the text field with previously set values
    JTextField titleTemp = new JTextField(50);
    titleTemp.setText(item.title);
    JTextField skillTemp = new JTextField(10); 
    skillTemp.setText(item.skills);
    JTextField payRateTemp = new JTextField(20);
    payRateTemp.setText(item.payRate);
    JTextField assignedTasksTemp = new JTextField(10);
    assignedTasksTemp.setText(item.assignedTasks);
    JTextField availabilityTemp= new JTextField(10);
    availabilityTemp.setText(item.availability);
    JTextField statusTemp = new JTextField(10);
    statusTemp.setText(item.status);
		
		Object[] fields= {"Edit Resource","Name",nameTemp,"Title",titleTemp,"Skills", skillTemp, "Pay Rate",payRateTemp,
				"Tasks Assigned",assignedTasksTemp,"Availability Calendar",availabilityTemp,"Status",statusTemp};
		//Input message with the textfields
		int result = JOptionPane.showConfirmDialog(null, fields,
				"Edit Resource", JOptionPane.OK_CANCEL_OPTION,JOptionPane.INFORMATION_MESSAGE);
		if (result == JOptionPane.OK_OPTION) {
			String name = nameTemp.getText();
			String title = titleTemp.getText();
			String skills = skillTemp.getText();
			String payRate = payRateTemp.getText();
			String assignedTasks = assignedTasksTemp.getText();
			String availability =availabilityTemp.getText();
			String status = statusTemp.getText();
			//String end  = endTemp.getText();
			//if the user hasn't entered anything and clicked OK
			if (name.equals("") && title.equals("") && skills.equals("") && status.equals("")) {
				JOptionPane.showMessageDialog(null, "Wrong Input\n\n Try Again");
				//restarting the method.
				modifyInput(item);
			}

			strings[0] = name;
			strings[1] = title;
			strings[2] = skills;
			strings[3] = payRate;
			strings[4] = assignedTasks;
			strings[5] = availability;
			strings[6] = status;
		}
    return strings;
  }

  //popup on double click //show the information of the form
  public void moreInfoMenu(){
    String rowUniqueID = table.getModel().getValueAt(rowNumber, 6).toString();
    int indexFound = -1;
    Resource  current = null;
    for(int i = 0; i < resourceList.size(); i++){
      if(resourceList.get(i).uniqueID.equals(rowUniqueID)){
        current = resourceList.get(i);
        indexFound = i;
        break;
      }
    }
    String inputValueString = "Resource form "+
                              "\n\nName: "+current.name+
                              "\nTitle: "+current.title+
                              "\nSkill: "+current.skills+
                              "\nPay Rate: "+current.payRate+
                              "\nTasks Assigned: "+current.assignedTasks+
                              "\nAvailability: "+current.availability+
                              "\nStatus: "+ current.status +
                              "\n\n\nUnique ID: "+current.uniqueID+"\n";
    JOptionPane.showMessageDialog(resource_Info, inputValueString);
  }

  //load rows if there is items in the list
  public void loadRows() { 
	  Object[] row = new Object [7];
	  for(int i = 0; i < resourceList.size(); i++) {
		row[0] = resourceList.get(i).uniqueID; //status
	  	row[1] = resourceList.get(i).name; //name
	    row[2] = resourceList.get(i).title; //resource
	    row[3] = resourceList.get(i).skills; //skills
            row[4] = resourceList.get(i).payRate; //payrate
	    row[5] = resourceList.get(i).assignedTasks; //tasks assigned
	    row[6] = resourceList.get(i).status; //status
	    model.addRow(row);
	  }

  }  
}
